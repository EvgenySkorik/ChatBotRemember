from typing import Optional, Type

from aiogram.types import ErrorEvent

from app.services.loging import get_logger

logger = get_logger("errors_logger")


class AppError(Exception):
    """–ë–∞–∑–æ–≤–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–µ–π —Å–æ–æ–±—â–µ–Ω–∏–π"""

    def __init__(
            self,
            tech_message: str,
            user_message: Optional[str] = None,
            exception_type: Optional[Type[Exception]] = None
    ):
        """
        :param tech_message: –¢–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ª–æ–≥–æ–≤
        :param user_message: –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–µ—Å–ª–∏ None - –±–µ—Ä—ë—Ç—Å—è –∏–∑ exception_type)
        :param exception_type: –¢–∏–ø –¥–ª—è isinstance –ø—Ä–æ–≤–µ—Ä–æ–∫ (–µ—Å–ª–∏ –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è –æ—Ç –∫–ª–∞—Å—Å–∞)
        """
        self.tech_message = tech_message
        self._user_message = user_message
        self._type = exception_type or self.__class__
        super().__init__(tech_message)

    @property
    def user_message(self) -> str:
        return self._user_message or f"‚ùå {self.tech_message}"

    def __instancecheck__(self, instance) -> bool:
        return isinstance(instance, self._type)


class NotFoundError(AppError):
    """–ö–æ–≥–¥–∞ —Å—É—â–Ω–æ—Å—Ç—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –ë–î"""

    def __init__(self, entity_name: str):
        super().__init__(
            tech_message=f"{entity_name} not found",
            user_message=f"üîç {entity_name.capitalize()} –Ω–µ –Ω–∞–π–¥–µ–Ω(–∞)"
        )


class InvalidInputError(AppError):
    """–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –≤—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ"""

    def __init__(self, field: str = "", details: str = ""):
        super().__init__(
            tech_message=f"Invalid input: {field} {details}".strip(),
            user_message=f"‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ {field}" if field else "‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞"
        )


class AccessDeniedError(AppError):
    """–ü—Ä–æ–±–ª–µ–º—ã —Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π/–ø—Ä–∞–≤–∞–º–∏"""

    def __init__(self):
        super().__init__(
            tech_message="Access denied",
            user_message="üö´ –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞, –∏–ª–∏ –í–∞—à —Ç–æ–∫–µ–Ω —É—Å—Ç–∞—Ä–µ–ª, –Ω–∞–∂–º–∏—Ç–µ /start"
        )


class DatabaseError(AppError):
    """–û—à–∏–±–∫–∏ —Ä–∞–±–æ—Ç—ã —Å –ë–î"""

    def __init__(self, details: str = ""):
        super().__init__(
            tech_message=f"Database error: {details}",
            user_message="üîß –û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"
        )


async def global_bot_error_handler(event: ErrorEvent) -> bool:
    """–¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö –æ—à–∏–±–æ–∫ –±–æ—Ç–∞"""

    logger.info("–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—É—é –æ—à–∏–±–∫—É")

    error = event.exception

    if isinstance(error, AppError):
        logger.warning(f"Business error: {error.tech_message}", exc_info=error)
    else:
        logger.critical(f"Unhandled error: {str(error)}", exc_info=error)

    user_message = (
        error.user_message if isinstance(error, AppError)
        else "‚ùå –ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞. –ê–¥–º–∏–Ω —É–∂–µ —É–≤–µ–¥–æ–º–ª—ë–Ω"
    )

    try:
        update = event.update

        if update.message:
            await update.message.answer(user_message)
        elif update.callback_query and update.callback_query.message:
            await update.callback_query.message.answer(user_message)
    except Exception as e:
        logger.error(f"Failed to send error message: {str(e)}")

    return True
